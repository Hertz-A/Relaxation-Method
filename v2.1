import numpy as np
import matplotlib.pyplot as plt

rows = 50
columns = 50
mesh = np.zeros((rows, columns))

# Boundary Conditions
mesh[:,0] = 1
mesh[0,:] = 1
mesh[:, -1] = 1
mesh[-1, :] = 1

# Parâmetros de parada
max_iterations = 2000  # Número máximo de iterações permitidas
tolerance = 1e-6  # Tolerância para a diferença entre o valor máximo atual e anterior

# Variáveis de controle
previous_mesh = np.copy(mesh)
iteration_count = 0

# Relaxation Method
for iteration in range(max_iterations):
    for i in range(1, mesh.shape[0] - 1):
        for j in range(1, mesh.shape[1] - 1):
            if mesh[i, j] == 1: #Aqui devemos definir esse valor como sendo igual ao da condição de contorno.
                continue
            mesh[i, j] = 0.2 * (
                (mesh[i + 1, j] + mesh[i - 1, j] + mesh[i, j - 1] + mesh[i, j + 1]) +
                (mesh[i + 1, j + 1] + mesh[i + 1, j - 1] + mesh[i - 1, j + 1] + mesh[i - 1, j - 1]) * 0.25
            )

    # Verificação da condição de parada
    difference = np.max(np.abs(mesh - previous_mesh))
    if difference < tolerance:
        break

    previous_mesh = np.copy(mesh)
    iteration_count += 1

# Plot da matriz
plt.imshow(mesh, cmap='hot', origin='lower')
plt.colorbar()
plt.title('Relaxation Method - Mesh')
plt.xlabel('Column')
plt.ylabel('Row')
plt.show()

# Imprimir o número de iterações
print(f"Número de iterações: {iteration_count}")
